#!/usr/bin/env python

from PIL import Image
from sys import argv

import src.conversion as conv
from src.edge_detection import sobel, box_blur


def side_by_side(
    im_1: Image.Image, im_2: Image.Image, gap=20, vertical_or=True
) -> Image.Image:
    if vertical_or:
        sbs = Image.new("RGB", (im_1.size[0], im_1.size[1] + im_2.size[1] + gap))
    else:
        sbs = Image.new("RGB", (im_1.size[0] + gap + im_2.size[0], im_1.size[1]))

    sbs.paste(im_1)
    sbs.paste(im_2, (0, im_1.size[1] + gap) if vertical_or else (im_1.size[0] + gap, 0))
    return sbs


# each sublist is a column
def get_rgb_pixels(im: Image.Image) -> list[list]:
    return [[im.getpixel((i, j)) for i in range(im.size[0])] for j in range(im.size[1])]


def ascii_to_stdout(im: list[list[str]]):
    for row in im:
        print("".join(row))


def main():
    if len(argv) != 2:
        print("Usage:\t asciifilt path/to/image.ext")
        exit(1)

    im = Image.open(argv[1])
    im = im.resize((im.size[0] // 8, im.size[1] // 8))

    grayscale = conv.rgb_to_grayscale(get_rgb_pixels(im))
    ascii_angles = conv.ascii_angles(sobel(box_blur(grayscale), get_angle=True))
    ascii_fills = conv.quantized_to_ascii(conv.grayscale_to_3bit(grayscale))
    ascii_overlap = conv.ascii_overlap(ascii_angles, ascii_fills)
    ascii_im = conv.ascii_to_image(ascii_overlap)
    ascii_im.save("out.jpg")
    ascii_to_stdout(ascii_overlap)


if __name__ == "__main__":
    main()
